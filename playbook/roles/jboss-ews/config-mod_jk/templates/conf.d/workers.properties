#
worker.list=jkstatus,{{ workerList }}

# Templates
worker.template.type=ajp13

# Worker connection pool maintain timeout in seconds. If set to the positive
# value JK will scan all connections for all workers specified in
# worker.list directive and check if connections needs to be recycled.
#
worker.template.maintain=60

# The loadbalancer (type lb) workers perform wighted round-robin
# load balancing with sticky sessions.
# Note:
#  ----> If a worker dies, the load balancer will check its state
#        once in a while. Until then all work is redirected to peer
#        workers.
#
worker.template.lbfactor=1

# This flag determines, under which conditions established connections are
# probed to ensure they are still working. The probe is done with an empty
# AJP13 packet (CPing) and expects to receive an appropriate answer (CPong)
# within some timeout. The value of the flag can be any combination of the
# following flags (multiple values are combined without any separators):
#
# C (connect): If set, the connection will be probed once after connecting
#  to the backend. The timeout can be set by connect_timeout. If it is not
#  set, the value of ping_timeout will be used instead.
# P (prepost): If set, the connection will be probed before sending each
#  request to the backend. The timeout can be set by prepost_timeout. If it
#  is not set, the value of ping_timeout will be used instead.
# I (interval): If set, the connection will be probed during the regular
#  internal maintenance cycle, but only if it is idle longer than
#  connection_ping_interval. The timeout can be set by ping_timeout.
# A If set, all of the above probes will be used.
# (1.2.27+)
#
worker.template.ping_mode=A

# Timeout in milliseconds used when waiting for the CPong answer of a CPing
# connection probe. The activation of the probes is done via ping_mode. The
# timeouts for ping_mode connect and prepost can be overwritten individually
# via connect_timeout and prepost_timeout. (1.2.27+)
#
worker.template.ping_timeout=2000

# Prepost timeout property told webserver to send a PING request on ajp13
# connection before forwarding to it a request. The parameter is the delay
# in milliseconds to wait for the PONG reply. (1.2.6+)
#
worker.template.prepost_timeout=2000

# Socket timeout in seconds used for communication channel between JK and
# remote host. If remote host does not respond inside that timeout the JK
# will generate an error, and retry again. If set to value zero (default)
# the JK will wait for infinite on all socket operations.
#
worker.template.socket_timeout=60

# Socket connect timeout in milliseconds used for the communication channel
# between JK and remote host. If the remote host does not respond inside
# the timeout specified, JK will generate an error, and retry again.
#
# Note that socket_timeout is in seconds, and socket_connect_timeout in
# milliseconds, so in absolute terms the default socket_connect_timeout is
# equal to socket_timeout. (1.2.27+)
#
worker.template.socket_connect_timeout=2000

# This directive should be used when you have a firewall between your
# webserver and the Tomcat engine, who tend to drop inactive connections.
# This flag will told Operating System to send KEEP_ALIVE message on inactive
# connections (interval depend on global OS settings, generally 120ms),
# and thus prevent the firewall to cut the connection. To enable keepalive
# set this property value to True.
#
worker.template.socket_keepalive=true

# Cache timeout property should be used with connection_pool_size to specify
# how long JK should keep an inactive socket in cache before closing it. This
# property should be used to reduce the number of threads on the Tomcat
# WebServer. The default value zero disables the closing (infinite timeout).
#
worker.template.connection_pool_timeout=60

# Connect timeout property told webserver to send a PING request on ajp13
# connection after connection is established. The parameter is the delay
# in milliseconds to wait for the PONG reply. (1.2.6+)
#
worker.template.connect_timeout=10000

# Recovery options property told webserver how to handle recovery when it
# detect that tomcat failed. By default, webserver will forward the request
# to another tomcat in LB mode (or to another ajp thread in ajp13 mode).
#  (1.2.6+)
# 0 (full recovery)
# 1 (don't recover if tomcat failed after getting the request)
# 2 (don't recover if tomcat failed after sending the headers to client)
# 3 (don't recover if tomcat failed getting the request or after sending
#    the headers to client).
# 4 (the connection between the webserver and tomcat will be closed if
#    the client connection to the webserver is terminated during the
#    request/response cycle) (1.2.16+)
# 8: always recover requests for HTTP method HEAD (even if Bits 1 or 2
#    are set) (1.2.24+)
# 16: always recover requests for HTTP method GET (even if Bits 1 or 2
#     are set) (1.2.24+)
#
worker.template.recovery_options=7

{% for worker in workerPropertiesArr %}
worker.{{ worker.workerName }}.reference=worker.template
worker.{{ worker.workerName }}.host={{ worker.workerHost }}
worker.{{ worker.workerName }}.port={{ worker.workerPort }}

{% endfor %}

worker.{{ workerList }}.type=lb
worker.{{ workerList }}.method=Session
worker.{{ workerList }}.sticky_session=True
worker.{{ workerList }}.balance_workers={% for worker in workerPropertiesArr %}{{ worker.workerName}},{% endfor %}


worker.jkstatus.type=status

